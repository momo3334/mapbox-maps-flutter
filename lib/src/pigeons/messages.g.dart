// Autogenerated from Pigeon (v22.6.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

part of mapbox_maps_flutter;

enum PlaceAutocompleteType {
  country,
  region,
  postcode,
  district,
  place,
  locality,
  neighborhood,
  street,
  address,
}

enum _NavigationEventTypes {
  routeLineChanged,
  locationPuckClicked,
}

enum NavigationCameraStates {
  idle,
  transitionToFollowing,
  following,
  transitionToOverview,
  overview,
}

class RouteProgressEventData {
  RouteProgressEventData({
    required this.distanceTraveled,
    required this.name,
  });

  double distanceTraveled;

  String name;

  Object encode() {
    return <Object?>[
      distanceTraveled,
      name,
    ];
  }

  static RouteProgressEventData decode(Object result) {
    result as List<Object?>;
    return RouteProgressEventData(
      distanceTraveled: result[0]! as double,
      name: result[1]! as String,
    );
  }
}

class GeoPoint {
  GeoPoint({
    required this.type,
    required this.coordinates,
  });

  String type;

  List<double> coordinates;

  Object encode() {
    return <Object?>[
      type,
      coordinates,
    ];
  }

  static GeoPoint decode(Object result) {
    result as List<Object?>;
    return GeoPoint(
      type: result[0]! as String,
      coordinates: (result[1] as List<Object?>?)!.cast<double>(),
    );
  }
}

class PlaceAutoCompleteSuggestion {
  PlaceAutoCompleteSuggestion({
    required this.name,
    this.formattedAddress,
    this.coordinate,
    this.routablePoints,
    this.makiIcon,
    this.distanceMeters,
    this.etaMinutes,
    required this.type,
    this.categories,
  });

  /// Place's name.
  String name;

  /// Formatted address.
  String? formattedAddress;

  /// Place geographic point.
  GeoPoint? coordinate;

  /// List of points near [coordinate], that represents entries to associated building.
  List<RoutablePoint>? routablePoints;

  /// [Maki](https://github.com/mapbox/maki/) icon name for the place.
  String? makiIcon;

  /// Distance in meters from place's coordinate to user location (if available).
  double? distanceMeters;

  /// Estimated time of arrival (in minutes) based on the specified navigation profile.
  double? etaMinutes;

  /// The type of result.
  PlaceAutocompleteType type;

  ///Poi categories. Always empty for non-POI suggestions.
  List<String>? categories;

  Object encode() {
    return <Object?>[
      name,
      formattedAddress,
      coordinate,
      routablePoints,
      makiIcon,
      distanceMeters,
      etaMinutes,
      type,
      categories,
    ];
  }

  static PlaceAutoCompleteSuggestion decode(Object result) {
    result as List<Object?>;
    return PlaceAutoCompleteSuggestion(
      name: result[0]! as String,
      formattedAddress: result[1] as String?,
      coordinate: result[2] as GeoPoint?,
      routablePoints: (result[3] as List<Object?>?)?.cast<RoutablePoint>(),
      makiIcon: result[4] as String?,
      distanceMeters: result[5] as double?,
      etaMinutes: result[6] as double?,
      type: result[7]! as PlaceAutocompleteType,
      categories: (result[8] as List<Object?>?)?.cast<String>(),
    );
  }
}

class RoutablePoint {
  RoutablePoint({
    required this.point,
    required this.name,
  });

  GeoPoint point;

  String name;

  Object encode() {
    return <Object?>[
      point,
      name,
    ];
  }

  static RoutablePoint decode(Object result) {
    result as List<Object?>;
    return RoutablePoint(
      point: result[0]! as GeoPoint,
      name: result[1]! as String,
    );
  }
}

class PlaceAutocompleteResult {
  PlaceAutocompleteResult({
    required this.id,
    this.mapboxId,
    required this.name,
    required this.coordinate,
    this.routablePoints,
    this.makiIcon,
    this.distanceMeters,
    this.etaMinutes,
    required this.type,
    this.categories,
    this.phone,
    this.website,
    this.reviewCount,
    this.averageRating,
  });

  /// Result ID
  String id;

  /// Result MapboxID
  String? mapboxId;

  /// Place's name.
  String name;

  /// Place geographic point.
  GeoPoint coordinate;

  /// List of points near [coordinate], that represents entries to associated building.
  List<RoutablePoint>? routablePoints;

  /// [Maki](https://github.com/mapbox/maki/) icon name for the place.
  String? makiIcon;

  /// Distance in meters from place's coordinate to user location (if available).
  double? distanceMeters;

  /// Estimated time of arrival (in minutes) based on the specified navigation profile.
  double? etaMinutes;

  /// Place's address.
  /// The type of result.
  PlaceAutocompleteType type;

  /// Poi categories. Always empty for non-POI results.
  /// @see type
  List<String>? categories;

  /// Business phone number.
  String? phone;

  /// Business website.
  String? website;

  /// Number of reviews.
  int? reviewCount;

  /// Average rating.
  double? averageRating;

  Object encode() {
    return <Object?>[
      id,
      mapboxId,
      name,
      coordinate,
      routablePoints,
      makiIcon,
      distanceMeters,
      etaMinutes,
      type,
      categories,
      phone,
      website,
      reviewCount,
      averageRating,
    ];
  }

  static PlaceAutocompleteResult decode(Object result) {
    result as List<Object?>;
    return PlaceAutocompleteResult(
      id: result[0]! as String,
      mapboxId: result[1] as String?,
      name: result[2]! as String,
      coordinate: result[3]! as GeoPoint,
      routablePoints: (result[4] as List<Object?>?)?.cast<RoutablePoint>(),
      makiIcon: result[5] as String?,
      distanceMeters: result[6] as double?,
      etaMinutes: result[7] as double?,
      type: result[8]! as PlaceAutocompleteType,
      categories: (result[9] as List<Object?>?)?.cast<String>(),
      phone: result[10] as String?,
      website: result[11] as String?,
      reviewCount: result[12] as int?,
      averageRating: result[13] as double?,
    );
  }
}

class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();

  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    } else if (value is PlaceAutocompleteType) {
      buffer.putUint8(129);
      writeValue(buffer, value.index);
    } else if (value is _NavigationEventTypes) {
      buffer.putUint8(130);
      writeValue(buffer, value.index);
    } else if (value is NavigationCameraStates) {
      buffer.putUint8(131);
      writeValue(buffer, value.index);
    } else if (value is RouteProgressEventData) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is GeoPoint) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is PlaceAutoCompleteSuggestion) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is RoutablePoint) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is PlaceAutocompleteResult) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : PlaceAutocompleteType.values[value];
      case 130:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : _NavigationEventTypes.values[value];
      case 131:
        final int? value = readValue(buffer) as int?;
        return value == null ? null : NavigationCameraStates.values[value];
      case 132:
        return RouteProgressEventData.decode(readValue(buffer)!);
      case 133:
        return GeoPoint.decode(readValue(buffer)!);
      case 134:
        return PlaceAutoCompleteSuggestion.decode(readValue(buffer)!);
      case 135:
        return RoutablePoint.decode(readValue(buffer)!);
      case 136:
        return PlaceAutocompleteResult.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class _NavigationManager {
  /// Constructor for [_NavigationManager].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  _NavigationManager(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> setRoute(GeoPoint origin, GeoPoint destination) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._NavigationManager.setRoute$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
        .send(<Object?>[origin, destination]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> setRouteById(String routeId) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._NavigationManager.setRouteById$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[routeId]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> cancelRoute() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._NavigationManager.cancelRoute$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<String> getNavigationSessionState() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._NavigationManager.getNavigationSessionState$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as String?)!;
    }
  }
}

class _NavigationInstanceManager {
  /// Constructor for [_NavigationInstanceManager].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  _NavigationInstanceManager(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> setupNavigationManager(String channelSuffix) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._NavigationInstanceManager.setupNavigationManager$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
        .send(<Object?>[channelSuffix]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> tearDownNavigationManager(String channelSuffix) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._NavigationInstanceManager.tearDownNavigationManager$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
        .send(<Object?>[channelSuffix]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _NavigationCameraManager {
  /// Constructor for [_NavigationCameraManager].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  _NavigationCameraManager(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> requestNavigationCameraToOverview() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._NavigationCameraManager.requestNavigationCameraToOverview$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> requestNavigationCameraToFollowing() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._NavigationCameraManager.requestNavigationCameraToFollowing$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<NavigationCameraStates> getNavigationCameraState() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._NavigationCameraManager.getNavigationCameraState$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as NavigationCameraStates?)!;
    }
  }

  Future<void> followingPitchPropertyOverride(double pitch) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._NavigationCameraManager.followingPitchPropertyOverride$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[pitch]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> followingBearingPropertyOverride(double bearing) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._NavigationCameraManager.followingBearingPropertyOverride$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[bearing]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> overviewPitchPropertyOverride(double pitch) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._NavigationCameraManager.overviewPitchPropertyOverride$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[pitch]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> overviewBearingPropertyOverride(double bearing) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._NavigationCameraManager.overviewBearingPropertyOverride$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[bearing]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> overviewZoomPropertyOverride(double zoom) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._NavigationCameraManager.overviewZoomPropertyOverride$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[zoom]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> followingZoomPropertyOverride(double zoom) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._NavigationCameraManager.followingZoomPropertyOverride$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[zoom]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> clearFollowingOverrides() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._NavigationCameraManager.clearFollowingOverrides$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> clearOverviewOverrides() async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._NavigationCameraManager.clearOverviewOverrides$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(null) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}

class _PlaceAutocompleteManager {
  /// Constructor for [_PlaceAutocompleteManager].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  _PlaceAutocompleteManager(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<List<PlaceAutoCompleteSuggestion>> suggestions(String query) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._PlaceAutocompleteManager.suggestions$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[query]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else if (pigeonVar_replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (pigeonVar_replyList[0] as List<Object?>?)!
          .cast<PlaceAutoCompleteSuggestion>();
    }
  }

  Future<PlaceAutocompleteResult?> select(int index) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._PlaceAutocompleteManager.select$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_channel.send(<Object?>[index]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as PlaceAutocompleteResult?);
    }
  }
}

class _PlaceAutocompleteInstanceManager {
  /// Constructor for [_PlaceAutocompleteInstanceManager].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  _PlaceAutocompleteInstanceManager(
      {BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix =
            messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<void> setupPlaceAutocompleteManager(String channelSuffix) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._PlaceAutocompleteInstanceManager.setupPlaceAutocompleteManager$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
        .send(<Object?>[channelSuffix]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }

  Future<void> tearDownPlaceAutocompleteManager(String channelSuffix) async {
    final String pigeonVar_channelName =
        'dev.flutter.pigeon.mapbox_maps_flutter._PlaceAutocompleteInstanceManager.tearDownPlaceAutocompleteManager$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel =
        BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final List<Object?>? pigeonVar_replyList = await pigeonVar_channel
        .send(<Object?>[channelSuffix]) as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return;
    }
  }
}
