// Autogenerated from Pigeon (v22.6.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.mapbox.maps.mapbox_maps.pigeons

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

enum class PlaceAutocompleteType(val raw: Int) {
  COUNTRY(0),
  REGION(1),
  POSTCODE(2),
  DISTRICT(3),
  PLACE(4),
  LOCALITY(5),
  NEIGHBORHOOD(6),
  STREET(7),
  ADDRESS(8);

  companion object {
    fun ofRaw(raw: Int): PlaceAutocompleteType? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class _NavigationEventTypes(val raw: Int) {
  ROUTE_LINE_CHANGED(0);

  companion object {
    fun ofRaw(raw: Int): _NavigationEventTypes? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class RouteProgressEventData (
  val distanceTraveled: Double,
  val name: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): RouteProgressEventData {
      val distanceTraveled = pigeonVar_list[0] as Double
      val name = pigeonVar_list[1] as String
      return RouteProgressEventData(distanceTraveled, name)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      distanceTraveled,
      name,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class GeoPoint (
  val type: String,
  val coordinates: List<Double>
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): GeoPoint {
      val type = pigeonVar_list[0] as String
      val coordinates = pigeonVar_list[1] as List<Double>
      return GeoPoint(type, coordinates)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      type,
      coordinates,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlaceAutoCompleteSuggestion (
  /** Place's name. */
  val name: String,
  /** Formatted address. */
  val formattedAddress: String? = null,
  /** Place geographic point. */
  val coordinate: GeoPoint? = null,
  /** List of points near [coordinate], that represents entries to associated building. */
  val routablePoints: List<RoutablePoint>? = null,
  /** [Maki](https://github.com/mapbox/maki/) icon name for the place. */
  val makiIcon: String? = null,
  /** Distance in meters from place's coordinate to user location (if available). */
  val distanceMeters: Double? = null,
  /** Estimated time of arrival (in minutes) based on the specified navigation profile. */
  val etaMinutes: Double? = null,
  /** The type of result. */
  val type: PlaceAutocompleteType,
  /**Poi categories. Always empty for non-POI suggestions. */
  val categories: List<String>? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PlaceAutoCompleteSuggestion {
      val name = pigeonVar_list[0] as String
      val formattedAddress = pigeonVar_list[1] as String?
      val coordinate = pigeonVar_list[2] as GeoPoint?
      val routablePoints = pigeonVar_list[3] as List<RoutablePoint>?
      val makiIcon = pigeonVar_list[4] as String?
      val distanceMeters = pigeonVar_list[5] as Double?
      val etaMinutes = pigeonVar_list[6] as Double?
      val type = pigeonVar_list[7] as PlaceAutocompleteType
      val categories = pigeonVar_list[8] as List<String>?
      return PlaceAutoCompleteSuggestion(name, formattedAddress, coordinate, routablePoints, makiIcon, distanceMeters, etaMinutes, type, categories)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      name,
      formattedAddress,
      coordinate,
      routablePoints,
      makiIcon,
      distanceMeters,
      etaMinutes,
      type,
      categories,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class RoutablePoint (
  val point: GeoPoint,
  val name: String
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): RoutablePoint {
      val point = pigeonVar_list[0] as GeoPoint
      val name = pigeonVar_list[1] as String
      return RoutablePoint(point, name)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      point,
      name,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class PlaceAutocompleteResult (
  /** Result ID */
  val id: String,
  /** Result MapboxID */
  val mapboxId: String? = null,
  /** Place's name. */
  val name: String,
  /** Place geographic point. */
  val coordinate: GeoPoint,
  /** List of points near [coordinate], that represents entries to associated building. */
  val routablePoints: List<RoutablePoint>? = null,
  /** [Maki](https://github.com/mapbox/maki/) icon name for the place. */
  val makiIcon: String? = null,
  /** Distance in meters from place's coordinate to user location (if available). */
  val distanceMeters: Double? = null,
  /** Estimated time of arrival (in minutes) based on the specified navigation profile. */
  val etaMinutes: Double? = null,
  /**
   * Place's address.
   * The type of result.
   */
  val type: PlaceAutocompleteType,
  /**
   * Poi categories. Always empty for non-POI results.
   * @see type
   */
  val categories: List<String>? = null,
  /** Business phone number. */
  val phone: String? = null,
  /** Business website. */
  val website: String? = null,
  /** Number of reviews. */
  val reviewCount: Long? = null,
  /** Average rating. */
  val averageRating: Double? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): PlaceAutocompleteResult {
      val id = pigeonVar_list[0] as String
      val mapboxId = pigeonVar_list[1] as String?
      val name = pigeonVar_list[2] as String
      val coordinate = pigeonVar_list[3] as GeoPoint
      val routablePoints = pigeonVar_list[4] as List<RoutablePoint>?
      val makiIcon = pigeonVar_list[5] as String?
      val distanceMeters = pigeonVar_list[6] as Double?
      val etaMinutes = pigeonVar_list[7] as Double?
      val type = pigeonVar_list[8] as PlaceAutocompleteType
      val categories = pigeonVar_list[9] as List<String>?
      val phone = pigeonVar_list[10] as String?
      val website = pigeonVar_list[11] as String?
      val reviewCount = pigeonVar_list[12] as Long?
      val averageRating = pigeonVar_list[13] as Double?
      return PlaceAutocompleteResult(id, mapboxId, name, coordinate, routablePoints, makiIcon, distanceMeters, etaMinutes, type, categories, phone, website, reviewCount, averageRating)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      id,
      mapboxId,
      name,
      coordinate,
      routablePoints,
      makiIcon,
      distanceMeters,
      etaMinutes,
      type,
      categories,
      phone,
      website,
      reviewCount,
      averageRating,
    )
  }
}
private open class MessagesPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          PlaceAutocompleteType.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          _NavigationEventTypes.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RouteProgressEventData.fromList(it)
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          GeoPoint.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlaceAutoCompleteSuggestion.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          RoutablePoint.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          PlaceAutocompleteResult.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is PlaceAutocompleteType -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is _NavigationEventTypes -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is RouteProgressEventData -> {
        stream.write(131)
        writeValue(stream, value.toList())
      }
      is GeoPoint -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is PlaceAutoCompleteSuggestion -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is RoutablePoint -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is PlaceAutocompleteResult -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface _NavigationManager {
  fun getHostLanguage(): String
  fun example()
  fun setRoute(origin: GeoPoint, destination: GeoPoint)
  fun setRouteById(routeId: String)
  fun cancelRoute()
  fun getNavigationSessionState(): String

  companion object {
    /** The codec used by _NavigationManager. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `_NavigationManager` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: _NavigationManager?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._NavigationManager.getHostLanguage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getHostLanguage())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._NavigationManager.example$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.example()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._NavigationManager.setRoute$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val originArg = args[0] as GeoPoint
            val destinationArg = args[1] as GeoPoint
            val wrapped: List<Any?> = try {
              api.setRoute(originArg, destinationArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._NavigationManager.setRouteById$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val routeIdArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.setRouteById(routeIdArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._NavigationManager.cancelRoute$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.cancelRoute()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._NavigationManager.getNavigationSessionState$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.getNavigationSessionState())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface _NavigationInstanceManager {
  fun setupNavigationManager(channelSuffix: String)
  fun tearDownNavigationManager(channelSuffix: String)

  companion object {
    /** The codec used by _NavigationInstanceManager. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `_NavigationInstanceManager` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: _NavigationInstanceManager?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._NavigationInstanceManager.setupNavigationManager$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val channelSuffixArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.setupNavigationManager(channelSuffixArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._NavigationInstanceManager.tearDownNavigationManager$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val channelSuffixArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.tearDownNavigationManager(channelSuffixArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface _NavigationCameraManager {
  fun requestNavigationCameraToOverview()
  fun requestNavigationCameraToFollowing()

  companion object {
    /** The codec used by _NavigationCameraManager. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `_NavigationCameraManager` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: _NavigationCameraManager?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._NavigationCameraManager.requestNavigationCameraToOverview$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.requestNavigationCameraToOverview()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._NavigationCameraManager.requestNavigationCameraToFollowing$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              api.requestNavigationCameraToFollowing()
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface _PlaceAutocompleteManager {
  fun suggestions(query: String, callback: (Result<List<PlaceAutoCompleteSuggestion>>) -> Unit)
  fun select(index: Long, callback: (Result<PlaceAutocompleteResult?>) -> Unit)

  companion object {
    /** The codec used by _PlaceAutocompleteManager. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `_PlaceAutocompleteManager` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: _PlaceAutocompleteManager?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PlaceAutocompleteManager.suggestions$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val queryArg = args[0] as String
            api.suggestions(queryArg) { result: Result<List<PlaceAutoCompleteSuggestion>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PlaceAutocompleteManager.select$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val indexArg = args[0] as Long
            api.select(indexArg) { result: Result<PlaceAutocompleteResult?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface _PlaceAutocompleteInstanceManager {
  fun setupPlaceAutocompleteManager(channelSuffix: String)
  fun tearDownPlaceAutocompleteManager(channelSuffix: String)

  companion object {
    /** The codec used by _PlaceAutocompleteInstanceManager. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `_PlaceAutocompleteInstanceManager` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: _PlaceAutocompleteInstanceManager?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PlaceAutocompleteInstanceManager.setupPlaceAutocompleteManager$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val channelSuffixArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.setupPlaceAutocompleteManager(channelSuffixArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.mapbox_maps_flutter._PlaceAutocompleteInstanceManager.tearDownPlaceAutocompleteManager$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val channelSuffixArg = args[0] as String
            val wrapped: List<Any?> = try {
              api.tearDownPlaceAutocompleteManager(channelSuffixArg)
              listOf(null)
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
